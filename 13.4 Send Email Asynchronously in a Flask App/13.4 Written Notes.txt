-> introduction to sending emails asynchronously in a flask app  
    -> email functionality and user verification were implemented in the previous lesson  
    -> threading can be used to improve email sending speed  
    -> flask-mail relies on an application context, which is why it blocks until the email is sent  
    -> the app is blocked until the email sending function completes  
    -> emails take time to send due to technology that helps prevent spam  
    -> the solution is to use threading to avoid blocking the app during email sending  

-> threading  
    -> threading allows email sending to happen in parallel with the app's normal operation  
    -> without threading, the app is blocked while waiting for the email to be sent  
    -> the solution is to create another thread specifically for sending emails  
    -> use the thread class to create the new thread for sending emails  
    -> the app context is still needed for the email to be sent properly  
    -> a new thread is created, and the app context is passed along with the email message  

-> send async email  
    -> to send an email asynchronously, a new thread is created  
    -> the application instance is passed to the new thread  
    -> the app context is artificially created in the new thread using `app.app_context()`  
    -> the email is sent within this new application context to avoid blocking  

-> code for sending emails asynchronously  
    -> the `send_email()` function is used to send the email  
    -> the email is configured with subject, recipients, and sender information  
    -> the message is rendered with both plain-text and html templates  
    -> a new thread is created using `thread(target=send_async_email, args=[app, msg])`  
    -> the thread is started with `thread.start()`  

-> functionality of `send_async_email()`  
    -> the `send_async_email()` function creates an app context using `with app.app_context()`  
    -> inside the app context, `mail.send(msg)` sends the email asynchronously  
    -> the new thread allows the email to be sent without blocking the app  

-> summary of python async email  
    -> emails are sent in parallel with the appâ€™s normal operation to avoid blocking  
    -> threading allows for creating new threads to send emails asynchronously  
    -> the application instance is passed to the new thread to create a new app context  
    -> this avoids blocking and ensures the email is sent correctly without interrupting the app's operation  

-> final reminder to perform a database migration for changes related to email sending and app context  
    -> database migrations ensure that the app remains up to date with changes made in the codebase  
    -> database migration is essential for maintaining app consistency after changes are implemented  

-> conclusion  
    -> the lesson covers asynchronous email sending with flask, which improves speed and prevents blocking  
    -> the next section will cover user roles and how to implement them in flask apps  
    -> mentorship programme is available for students who want further assistance and support during their learning journey  