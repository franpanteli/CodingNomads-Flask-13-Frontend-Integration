-> email confirmation tokens are used to verify user registration and prevent spam accounts  
    -> tokens ensure users have access to the email they provided for validation  
    -> tokens are generated by the app, not by users, for security reasons  
    -> cryptography ensures that tokens are valid and not manipulated  
    -> using user ids directly as tokens is insecure and can lead to exploitation  

-> to generate tokens securely, flask uses a cryptographic package  
    -> the package used here is pyjwt, which can generate signed tokens  
    -> tokens are encoded using a secret key to prevent unauthorised access  
    -> tokens expire after a set time, ensuring they can't be reused indefinitely  

-> the correct way to generate a token is to use pyjwt and a secret key for signing  
    -> expiration times can be set, and if the token expires, it is invalid  
    -> tokens are created with user-specific information (e.g., user id)  
    -> when the token is decoded, it is checked for validity and expiration  

-> to implement token generation in your app:  
    -> install pyjwt using pip  
    -> use flask’s secret key to sign tokens  
    -> create a datetime object for expiration  
    -> use jwt encoding to generate the token  

-> to validate a token:  
    -> decode it with the app’s secret key  
    -> ensure it hasn’t expired  
    -> verify the user id matches the data in the token  

-> after generating tokens, update the user model to store the confirmation status  
    -> add a boolean column to the user model to track if the user has confirmed their account  
    -> implement methods to generate and confirm tokens for users  
    -> the token generation method uses the user id and an expiration time  

-> the user confirmation method:  
    -> decodes the token to check for validity  
    -> checks the token hasn’t expired  
    -> ensures the user id matches the one in the token  
    -> updates the user’s confirmation status if everything checks out  

-> to test token functionality, write unit tests that simulate token generation and user confirmation  
    -> tests should cover all possible success and failure scenarios for token generation and validation  

-> once token generation is working, implement the email confirmation process  
    -> send users an email with a confirmation link containing the token  
    -> users need to click the link to confirm their registration  
    -> the confirmation link contains the token and leads to a flask route that processes it  

-> the confirmation route:  
    -> verifies the token and confirms the user’s email  
    -> redirects the user to another page if the token is valid  
    -> displays an error message if the token is invalid or expired  

-> to implement email verification, create a view function that generates and sends an email  
    -> include a link to the confirmation route with the token embedded  
    -> use flask's url_for method to generate a fully-qualified url for the confirmation link  

-> prevent unconfirmed users from accessing the app by using a before-request function  
    -> this function checks if the user is authenticated and confirmed before allowing access  
    -> redirects unconfirmed users to a separate page requesting confirmation  

-> to block access, apply the before_request handler to check the user’s confirmation status  
    -> if the user is authenticated but not confirmed, they are redirected to the unconfirmed page  

-> create a template to inform unconfirmed users that they need to verify their email  
    -> include an option to resend the confirmation email to unconfirmed users  

-> finally, after implementing token generation and confirmation, ensure the user authentication system is robust  
    -> with confirmation in place, users cannot access restricted parts of the app until they confirm their email  