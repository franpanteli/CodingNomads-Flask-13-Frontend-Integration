-> sending emails with python + flask-mail  
    -> email is still widely used, and flask-mail simplifies email sending in your app  
    -> flask-mail is an extension that helps handle the complexities of sending emails via smtp  
    -> in this lesson, you'll install and configure flask-mail to send emails from your python app  

-> install flask-mail  
    -> use the pip command: `pip install flask-mail` to install flask-mail  
    -> to add email support to your app, you need two things: an smtp server and the correct configuration settings  
    -> you can use an external smtp server (e.g., gmail) for development  

-> the configuration settings  
    -> set these configuration keys in your flask app to enable flask-mail  
        -> mail_server: the hostname or ip of the email server (default: `localhost`)  
        -> mail_port: the port of the email server (default: 25)  
        -> mail_use_tls: whether to use tls (transport layer security) (default: false)  
        -> mail_use_ssl: whether to use ssl (secure sockets layer) (default: false)  
        -> mail_username: the mail account username  
        -> mail_password: the mail account password  

-> settings for your gmail account  
    -> you need to enable smtp on your gmail account (but avoid using your personal account for security)  
    -> set your gmail account configuration in the `config.py` file  
        -> example configuration for gmail:  
            -> mail_server = 'smtp.gmail.com'  
            -> mail_port = 587  
            -> mail_use_tls = true  
            -> mail_username = os.environ.get('MAIL_USERNAME')  
            -> mail_password = os.environ.get('MAIL_PASSWORD')  

-> initialising flask-mail  
    -> to initialise flask-mail, add the following code to your app's main package:  
        -> `mail = mail()`  
        -> `mail.init_app(app)`  

-> sending emails from flask  
    -> you can create an email-sending function using flask-mail  
        -> example of a basic `send_email()` function that takes recipient, subject, template, and other parameters  

-> functional email sending  
    -> create an email-sending function that uses flask-mail to send messages  
        -> the function will use the message class from flask-mail to create an email  
        -> the email can have both text and html versions, with the text version used if the html one gets blocked  

-> make your templates  
    -> use jinja2 templating to create both text and html email templates  
        -> example templates: `welcome.txt`, `welcome.html`, `new_user.txt`, `new_user.html`  
        -> placeholders like `{{user.username}}` can be used in templates to personalise the message  

-> send an email  
    -> test the email functionality by sending an email through flask shell  
        -> example: `send_email(u.email, "you've got mail!", 'mail/welcome', user=u)`  

-> summary: sending emails with python + flask-mail  
    -> installed flask-mail to simplify email communication  
    -> configured the necessary smtp server settings in the app  
    -> initialised flask-mail and created a function to send emails  
    -> created personalised text and html email templates for users and admins  
    -> tested the email sending functionality using flask shell  